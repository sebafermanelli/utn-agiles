name: CI/CD for Hangman Project
env:
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  frontend:
    name: Frontend Tests and Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Frontend Dependencies
        run: |
          cd hangman-frontend
          npm install

      - name: Run Frontend Unit Tests with Coverage
        run: |
          cd hangman-frontend
          npm run test -- --no-watch --code-coverage --browsers=ChromeHeadless

      - name: Run Cypress E2E Tests
        run: |
          cd hangman-frontend
          npm start & npx wait-on http://localhost:4200
          npm run cypress:run

      - name: Upload Frontend Coverage
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: hangman-frontend/coverage

  backend:
    name: Backend Tests and Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Backend Dependencies
        run: |
          cd hangman-backend
          npm install

      - name: Run Backend Unit Tests with Coverage
        run: |
          cd hangman-backend
          npm run test:cov

      - name: Run Backend E2E Tests
        run: |
          cd hangman-backend
          npm run test:e2e

      - name: Upload Backend Coverage
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: hangman-backend/coverage

      - name: Check Coverage Thresholds
        run: |
          cd hangman-backend
          npx jest --coverage --coverageThreshold='{"global":{"branches":"80","functions":"80","lines":"80","statements":"80"}}'

  deploy:
    name: Deploy to Vercel
    needs: [frontend, backend]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
